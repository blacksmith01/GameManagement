@inject IStringLocalizer<SharedResources> L


<EditForm EditContext="@editContext" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <div class="modal-header">
        <h1 class="modal-title">@(isUpdateAction ? L["Edit Item"]: L["Add Item"])</h1>
    </div>
    <div class="modal-body">

        <button type="submit" disabled style="display: none" aria-hidden="true"></button>

        <div class="form-row">
            <div class="form-group col-4">
                <label for="item_id">@L["ID"]</label>
                <InputNumber class="form-control" id="item_id" @bind-Value="Item.id" disabled />
            </div>

            <div class="form-group col">
                <label for="item_name">@L["Name"]</label>
                <DropDownItemFinder Key="1" Items="@TableData.charitemList" OnSelectItem="OnSelectItem"
                            ItemToID="item => item.Id.ToString()" ItemToName="item => L[item.Name]">
                    <ResultView Context="ctxItemFinder">
                        <input id="item_name" class="form-control" type="text" @bind="itemName" @onclick="()=>OnClickItemFinder(ctxItemFinder)" disabled="@isUpdateAction" />
                    </ResultView>
                </DropDownItemFinder>
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col">
                <label for="item_count">@L["Count"]</label>
                <InputNumber class="form-control" id="item_count" @bind-Value="Item.count" />
            </div>

            <div class="form-group col">
                <label for="item_timelimit">@L["Cooltime(s)"]</label>
                <InputNumber class="form-control" id="item_timelimit" @bind-Value="Item.cooltime" />
            </div>
        </div>
        <ValidationSummary />
    </div>
    <div class="modal-footer">
        <button type="submit" class="btn btn-primary">@(isUpdateAction ? L["Update"]: L["Add"])</button>
        @if (isUpdateAction)
        {
            <button type="button" class="btn btn-primary" @onclick="OnRemove" data-dismiss="modal">@L["Remove"]</button>
        }
        <button type="button" class="btn btn-secondary" @onclick="OnCancel" data-dismiss="modal">@L["Cancel"]</button>
    </div>
</EditForm>

<style>
    .list-group {
        height: 300px;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
    }
</style>

@code
{
    EditContext editContext;
    bool isUpdateAction;
    string itemName;

    [Parameter]
    public GameChar.Item Item { get; set; }
    [Parameter]
    public EventCallback OnCreate { get; set; }
    [Parameter]
    public EventCallback OnUpdate { get; set; }
    [Parameter]
    public EventCallback OnRemove { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }

    protected override void OnParametersSet()
    {
        editContext = new EditContext(Item);
        isUpdateAction = Item.id != 0;
        if (isUpdateAction)
        {
            if (!TableData.charitems.TryGetValue(Item.id, out var gd))
            {
                itemName = "UNKNOWN";
            }
            else
            {
                itemName = L[gd.Name];
            }
        }
    }

    void OnClickItemFinder(Action<bool> showItemFinder)
    {
        if (!isUpdateAction)
        {
            showItemFinder(true);
        }
    }

    void OnSelectItem(string key, TableData.NameItem selected)
    {
        Item.id = selected.Id;
        itemName = L[selected.Name];

        StateHasChanged();
    }

    async Task OnSubmit()
    {
        if (!editContext.Validate())
        {
            return;
        }

        if (!isUpdateAction)
            await OnCreate.InvokeAsync(null);
        else
            await OnUpdate.InvokeAsync(null);

        editContext = new EditContext(Item);
    }
}